/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define NUM 1
#define SPECIAL 1
#define MAGIC 2
#define FBT 2
#define FACTORY_TEST 3

// shortcuts
#define ___ &trans
#define xxx &none

#define NUM1 KP_NUMBER_1
#define NUM2 KP_NUMBER_2 
#define NUM3 KP_NUMBER_3
#define NUM4 KP_NUMBER_4
#define NUM5 KP_NUMBER_5 
#define NUM6 KP_NUMBER_6 
#define NUM7 KP_NUMBER_7 
#define NUM8 KP_NUMBER_8 
#define NUM9 KP_NUMBER_9 
#define NUM0 KP_NUMBER_0 

// DE
#define DE_CARET GRAVE  	// ^ (dead)
#define DE_1    N1        	// 1
#define DE_2    N2        	// 2
#define DE_3    N3        	// 3
#define DE_4    N4        	// 4
#define DE_5    N5        	// 5
#define DE_6    N6        	// 6
#define DE_7    N7        	// 7
#define DE_8    N8        	// 8
#define DE_9    N9        	// 9
#define DE_0    N0        	// 0
#define DE_SS   MINUS		// ß
#define DE_ACUT EQUAL	  	// ´ (dead)
#define DE_Q    Q    		// Q
#define DE_W    W    		// W
#define DE_E    E    		// E
#define DE_R    R    		// R
#define DE_T    T   	 	// T
#define DE_Z    Y    		// Z
#define DE_U    U    		// U
#define DE_I    I    		// I
#define DE_O    O    		// O
#define DE_P    P    		// P
#define DE_UE	LBKT	 	// Ü
#define DE_PLUS RBKT 		// +
#define DE_A    A    		// A
#define DE_S    S    		// S
#define DE_D    D    		// D
#define DE_F    F    		// F
#define DE_G    G    		// G
#define DE_H    H    		// H
#define DE_J    J    		// J
#define DE_K    K    		// K
#define DE_L    L    		// L
#define DE_OE	SEMI	 	// Ö
#define DE_AE	SQT		 	// Ä
#define DE_HASH BACKSLASH 	// #
#define DE_LT	NUBS 		// <
#define DE_Y    Z    		// Y
#define DE_X    X    		// X
#define DE_C    C    		// C
#define DE_V    V    		// V
#define DE_B    B    		// B
#define DE_N    N    		// N
#define DE_M    M    		// M
#define DE_COMMA COMMA	 	// ,
#define DE_PERIOD PERIOD	// .
#define DE_MINUS SLASH 		// -
#define DE_DEG  LS(DE_CARET)// °
#define DE_EXLM LS(DE_1)    // !
#define DE_DQUO LS(DE_2)    // "
#define DE_SECT LS(DE_3)    // §
#define DE_DLR  LS(DE_4)    // $
#define DE_PERC LS(DE_5)    // %
#define DE_AMPR LS(DE_6)    // &
#define DE_SLSH LS(DE_7)    // /
#define DE_LPRN LS(DE_8)    // (
#define DE_RPRN LS(DE_9)    // )
#define DE_EQL  LS(DE_0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(DE_PLUS) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_GT	LS(DE_LT)	// >
#define DE_SCLN LS(DE_COMMA)// ;
#define DE_COLN LS(DE_PERIOD)  // :
#define DE_UNDS LS(DE_MINUS)// _
#define DE_SUP2 RA(DE_2)    // ²
#define DE_SUP3 RA(DE_3)    // ³
#define DE_LCBR RA(DE_7)    // {
#define DE_LBRC RA(DE_8)    // [
#define DE_RBRC RA(DE_9)    // ]
#define DE_RCBR RA(DE_0)    // }
#define DE_BSLS RA(DE_SS)   // (backslash)
#define DE_AT   RA(DE_Q)    // @
#define DE_EURO RA(DE_E)    // €
#define DE_TILD RA(DE_PLUS) // ~
#define DE_PIPE RA(DE_LT)	// |
#define DE_MICR RA(DE_M)    // µ

// Homerow mod timing
#define HM_TAPPING_TERM 280
#define HM_QUICK_TAP    175

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // Homerow mods for left hand (E A I U -> Ctrl Alt GUI Shift)
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_QUICK_TAP>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 42 43 44 69 70 71 72 73 74>;
            hold-trigger-on-release;
        };

        // Homerow mods for right hand (N R T D -> Shift GUI Alt Ctrl)
        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <HM_QUICK_TAP>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 45 46 47 63 64 65 66 67 68>;
            hold-trigger-on-release;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // Neo2 Layout with homerow mods using DE_* codes
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  ^    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  X  |  V  |  L   |  C   |  W   |                                                 |  K   |   H   |   G   |  F   |   Q   |   ß  |
            // |  ESC  |  U  | I/A |A/GUI |E/Ctrl| O   |                                                 |  S   |N/Shift|R/GUI |T/Alt |D/Ctrl|   Y  |
            // |   `   | Ü   |  Ö  |  Ä   |  P   |  Z   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  B   |   M   |   ,   |  .   |   J   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
            &kp F1         &kp F2   &kp F3      &kp F4      &kp F5                                                                                                 &kp F6    &kp F7         &kp F8         &kp F9        &kp F10
            &kp DE_CARET   &kp DE_1 &kp DE_2    &kp DE_3    &kp DE_4    &kp DE_5                                                            	          &kp DE_6 &kp DE_7  &kp DE_8       &kp DE_9       &kp DE_0      &kp DE_MINUS
            &kp TAB        &kp DE_X &kp DE_V    &kp DE_L    &kp DE_C    &kp DE_W                                                            	          &kp DE_K &kp DE_H  &kp DE_G       &kp DE_F       &kp DE_Q      &kp DE_SS
            &kp ESC        &kp DE_U &hm_l LALT DE_I &hm_l LGUI DE_A &hm_l LCTRL DE_E &kp DE_O                                               	          &kp DE_S &hm_r LCTRL DE_N &hm_r LALT DE_R &hm_r LGUI DE_T &hm_r LSHIFT DE_D &kp DE_Y
            &kp DE_ACUT    &kp DE_UE &kp DE_OE  &kp DE_AE   &kp DE_P    &kp DE_Z                &none &none &none &none &none &none         	          &kp DE_B &kp DE_M  &kp DE_COMMA   &kp DE_PERIOD  &kp DE_J      &kp PG_UP
            &magic MAGIC 0 &kp HOME &kp END     &kp LEFT    &kp RIGHT                       &mo SPECIAL &kp SPACE &kp BSPC &kp RETURN &kp LSHIFT &mo NUM           &kp UP    &kp DOWN       &kp LBKT       &kp RBKT      &kp PG_DN
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        special_layer {
            bindings = <
            &trans      &trans   &trans      &trans      &trans                                                                                      &trans    &trans         &trans         &trans        &trans
            &trans      &trans   &trans      &trans      &trans      &trans                                                              &trans      &trans    &trans      &trans       &trans      &trans
            &trans  	&kp DE_DEG &kp DE_UNDS &kp DE_LBRC &kp DE_RCBR &kp DE_CARET                                                      &kp DE_EXLM &kp DE_LT  &kp DE_GT       &kp DE_EQL       &kp DE_AMPR      &kp DE_SECT
            &trans		&kp DE_U &hm_l LALT DE_I &hm_l LGUI DE_A &hm_l LCTRL DE_E &kp DE_O                                               &kp DE_QUES &hm_r LCTRL DE_LPRN &hm_r LALT DE_RPRN &hm_r LGUI DE_MINUS &hm_r LSHIFT DE_COLN &kp DE_AT
            &trans		&kp DE_HASH &kp DE_DLR  &kp DE_PIPE   &kp DE_TILD    &kp DE_GRV &trans &trans &trans &trans &trans &trans       &kp DE_PLUS &kp DE_PERC  &kp DE_DQUO   &kp DE_QUOT  &kp DE_SCLN      &kp DE_EURO
            &trans		&trans      &trans     &trans       &trans                      &trans  &trans   &trans  &trans &trans   &trans             &trans      &trans       &trans       &trans      &trans
            >;
        };


        /**/
        /* special_layer { */
        /*     bindings = < */
        /*   &trans           &trans           &trans           &trans           &trans                                                                                                                         &trans           &trans           &trans           &trans           &trans */
        /*   &trans           &trans           &trans           &trans           &trans           &trans                                                                                             &trans           &trans           &trans           &trans           &trans           &trans */
        /*   &trans           &kp DE_DEG    &kp DE_UNDS   &kp DE_LBRC   &kp DE_RBRC   &kp DE_CARET                                                                                    &kp DE_EXLM   &kp DE_LT     &kp DE_GT     &kp DE_EQL    &kp DE_AMPR   &kp DE_SECT */
        /*   &trans        &hm_l LSHIFT DE_BSLS &hm_l LWIN DE_SLSH &hm_l LALT DE_LCBR &hm_l LCTRL DE_RCBR &kp DE_ASTR                                                                      &kp DE_QUES &hm_r LCTRL DE_LPRN &hm_r LALT DE_RPRN &hm_r LWIN DE_MINUS &hm_r LSHIFT DE_COLN &kp DE_AT */
        /*   &trans           &kp DE_HASH   &kp DE_DLR    &kp DE_PIPE   &kp DE_TILD   &kp DE_GRV    &trans           &trans           &trans       &trans         &trans         &trans                 &kp DE_PLUS   &kp DE_PERC   &kp DE_DQUO   &kp DE_QUOT   &kp DE_SCLN   &kp DE_EURO */
        /*   &trans           &trans           &trans           &trans           &trans                         &trans           &trans           &trans       &trans         &trans         &to MOUSE                         &trans           &trans           &trans           &trans           &trans */
        /*     >; */
        /* }; */
        /**/
        /* num_layer { */
        /*     bindings = < */
        /*   &trans           &trans           &trans           &trans           &trans                                                                                                                         &trans           &trans           &trans           &trans           &trans */
        /*   &trans           &kp F1        &kp F2        &kp F3        &kp F4        &kp F5                                                                                          &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &kp F11 */
        /*   &trans           &kp PG_UP     &kp BSPC      &kp UP        &kp DELETE    &kp PG_DN                                                                                       &kp SYSREQ    &kp NUM7      &kp NUM8      &kp NUM9      &mkp MB4      &kp F12 */
        /*   &trans        &hm_l LSHIFT HOME  &hm_l LWIN LEFT &hm_l LALT DOWN &hm_l LCTRL RIGHT &kp END                                                                                       &kp LG(LS(S)) &hm_r LCTRL NUM4 &hm_r LALT NUM5 &hm_r LWIN NUM6 &hm_r LSHIFT KP_DOT &none       */
        /*   &trans           &kp LCTRL     &kp H         &kp J         &kp K         &kp L         &trans           &trans           &trans       &trans         &trans         &trans                 &kp NUM0      &kp NUM1      &kp NUM2      &kp NUM3      &kp KP_COMMA  &none         */
        /*   &trans           &trans           &trans           &trans           &trans                         &to FBT       &trans           &trans       &trans         &trans         &trans                               &trans           &trans           &trans           &trans           &trans */
        /*     >; */
        /* }; */
        /**/
        /* mouse_layer { */
        /*     bindings = < */
        /*   &trans           &trans           &trans           &trans           &trans                                                                                                                        &trans           &trans           &trans           &trans           &trans */
        /*   &trans           &trans           &trans           &trans           &trans           &trans                                                                                            &trans           &trans           &trans           &trans           &trans           &trans */
        /*   &trans           &none           &msc SCRL_UP  &mmv MOVE_UP  &msc SCRL_DOWN &none                                                                                           &none           &mkp MB4      &mkp MB5      &none           &none           &none   */
        /*   &trans           &none         &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none                                                                                          &none           &mkp MB1      &mkp MB3      &mkp MB2      &none           &kp RSHIFT     */
        /*   &trans           &kp LCTRL     &none           &none           &none           &none           &trans           &trans           &trans       &trans         &trans         &trans                &none           &none           &none           &none           &none           &kp LALT       */
        /*   &trans           &trans           &trans           &trans           &trans                         &to DEF       &trans           &trans       &trans         &trans         &to DEF                          &trans           &trans           &trans           &trans           &trans */
        /*     >; */
        /* }; */

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
    };
};
