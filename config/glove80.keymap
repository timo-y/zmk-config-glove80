/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// German key definitions (converted from your includes)
#define DE_X X
#define DE_V V
#define DE_L L
#define DE_C C
#define DE_W W
#define DE_K K
#define DE_H H
#define DE_G G
#define DE_F F
#define DE_Q Q
#define DE_SS MINUS  // ß
#define DE_U U
#define DE_I I
#define DE_A A
#define DE_E E
#define DE_O O
#define DE_S S
#define DE_N N
#define DE_R R
#define DE_T T
#define DE_D D
#define DE_Y Y
#define DE_UE LBKT   // ü
#define DE_OE SEMI   // ö
#define DE_AE SQT    // ä
#define DE_P P
#define DE_Z Z
#define DE_B B
#define DE_M M
#define DE_COMMA COMMA
#define DE_PERIOD DOT
#define DE_J J

// Special characters
#define DE_DEG GRAVE     // °
#define DE_UNDS MINUS    // _
#define DE_LBRC LBKT     // [
#define DE_RBRC RBKT     // ]
#define DE_CARET EQUAL   // ^
#define DE_EXLM LS(N1)   // !
#define DE_LT LS(COMMA)  // <
#define DE_GT LS(DOT)    // >
#define DE_EQL EQUAL     // =
#define DE_AMPR LS(N7)   // &
#define DE_SECT LS(N3)   // §
#define DE_BSLS BSLH     // \
#define DE_SLSH FSLH     // /
#define DE_LCBR LS(LBKT) // {
#define DE_RCBR LS(RBKT) // }
#define DE_ASTR LS(RBKT) // *
#define DE_QUES LS(MINUS)// ?
#define DE_LPRN LS(N8)   // (
#define DE_RPRN LS(N9)   // )
#define DE_MINUS FSLH    // -
#define DE_COLN LS(DOT)  // :
#define DE_AT LS(N2)     // @
#define DE_HASH LS(N3)   // #
#define DE_DLR LS(N4)    // $
#define DE_PIPE LS(NUBS) // |
#define DE_TILD LS(RBKT) // ~
#define DE_GRV LS(EQUAL) // `
#define DE_PLUS LS(RBKT) // +
#define DE_PERC LS(N5)   // %
#define DE_DQUO LS(N2)   // "
#define DE_QUOT LS(N2)   // '
#define DE_SCLN LS(COMMA)// ;
#define DE_EURO LS(N5)   // €

#define HYPER LC(LS(LG(LALT)))

// Layer definitions
#define DEF 0
#define SPECIAL 1
#define NUM 2
#define MOUSE 3
#define FBT 4
#define MAGIC 5

/ {
    behaviors {
        // Control-tap behavior (converted from your ct behavior)
        ct: control_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CONTROL_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
        };

        // Undead macro behavior (converted from your ud behavior)
        ud: undead_macro {
            compatible = "zmk,behavior-macro-one-param";
            label = "UNDEAD_MACRO";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1>, <&kp MACRO_PLACEHOLDER>, <&kp SPACE>;
        };

        // Magic hold tap for status layer
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE>, <&bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";
        // NUMLOCK combo (converted from your combo)
        numlock_combo {
            bindings = <&kp KP_NLCK>;
            key-positions = <69 72>; // RB1 RB4 positions for Glove80
            layers = <NUM>;
            timeout-ms = <25>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // | none  |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   | none |
            // |  ESC  | CT_X| CT_V|  L   | CT_C |  W   |                                                 |  K   |   H   |   G   |  F   |   Q   |  ß   |
            // |  TAB  | CT_U| CT_I| CT_A | CT_E |  O   |                                                 |  S   | CT_N  | CT_R  | CT_T | CT_D  |  Y   |
            // | LSHFT |  Ü  |  Ö  |  Ä   |  P   |  Z   | SPACE | BSPC  | none  | none  | RET   | LSHFT |  B   |   M   |   ,   |  .   |   J   | none |
            // | MAGIC | none| none| none | none |      | SPEC  | SPACE | BSPC  | RET   | LSHFT | NUM   |      |  none | none  | none |  none | none |

            bindings = <
            &kp F1           &kp F2   &kp F3      &kp F4      &kp F5                                                                                         &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
            &none            &kp N1   &kp N2      &kp N3      &kp N4      &kp N5                                                                     &kp N6        &kp N7        &kp N8        &kp N9        &kp N0        &none
            &kp ESC      &ct LC(DE_X) DE_X &ct LC(DE_V) DE_V &kp DE_L &ct LC(DE_C) DE_C &kp DE_W                                                   &kp DE_K      &kp DE_H      &kp DE_G      &kp DE_F      &kp DE_Q      &kp DE_SS
            &kp TAB      &ct LSHIFT DE_U &ct LWIN DE_I &ct LALT DE_A &ct LCTRL DE_E &kp DE_O                                                        &kp DE_S   &ct LCTRL DE_N &ct LALT DE_R &ct LWIN DE_T &ct LSHIFT DE_D &kp DE_Y
            &kp LSHIFT      &kp DE_UE &kp DE_OE   &kp DE_AE   &kp DE_P    &kp DE_Z    &kp SPACE   &kp BSPC    &none      &none     &kp RET   &kp LSHIFT &kp DE_B      &kp DE_M      &kp DE_COMMA  &kp DE_PERIOD &kp DE_J      &none
            &magic MAGIC 0  &none    &none       &none       &none                   &mo SPECIAL &kp SPACE   &kp BSPC   &kp RET   &kp LSHIFT &mo NUM               &none         &none         &none         &none         &none
            >;
        };

        special_layer {
            bindings = <
            &trans          &trans        &trans        &trans        &trans                                                                                              &trans        &trans        &trans        &trans        &trans
            &trans          &trans        &trans        &trans        &trans        &trans                                                                      &trans  &trans        &trans        &trans        &trans        &trans
            &trans          &kp DE_DEG    &kp DE_UNDS   &kp DE_LBRC   &kp DE_RBRC   &ud DE_CARET                                                                &kp DE_EXLM   &kp DE_LT     &kp DE_GT     &kp DE_EQL    &kp DE_AMPR   &kp DE_SECT
            &trans       &ct LSHIFT DE_BSLS &ct LWIN DE_SLSH &ct LALT DE_LCBR &ct LCTRL DE_RCBR &kp DE_ASTR                                                  &kp DE_QUES &ct LCTRL DE_LPRN &ct LALT DE_RPRN &ct LWIN DE_MINUS &ct LSHIFT DE_COLN &kp DE_AT
            &trans          &kp DE_HASH   &kp DE_DLR    &kp DE_PIPE   &kp DE_TILD   &ud DE_GRV    &trans      &trans      &trans    &trans    &trans    &trans &kp DE_PLUS   &kp DE_PERC   &kp DE_DQUO   &kp DE_QUOT   &kp DE_SCLN   &kp DE_EURO
            &trans          &trans        &trans        &trans        &trans                      &trans      &trans      &trans    &trans    &trans    &to MOUSE            &trans        &trans        &trans        &trans        &trans
            >;
        };

        num_layer {
            bindings = <
            &trans          &trans        &trans        &trans        &trans                                                                                              &trans        &trans        &trans        &trans        &trans
            &trans          &trans        &trans        &trans        &trans        &trans                                                                      &trans  &trans        &trans        &trans        &trans        &trans
            &trans          &kp PG_UP     &kp BSPC      &kp UP        &kp DELETE    &kp PG_DN                                                                   &kp SYSREQ    &kp KP_N7     &kp KP_N8     &kp KP_N9     &mkp MB4      &kp F12
            &trans       &ct LSHIFT HOME  &ct LWIN LEFT &ct LALT DOWN &ct LCTRL RIGHT &kp END                                                                   &kp LG(LS(S)) &ct LCTRL KP_N4 &ct LALT KP_N5 &ct LWIN KP_N6 &ct LSHIFT KP_DOT &none
            &trans          &kp LCTRL     &kp H         &kp J         &kp K         &kp L         &trans      &trans      &trans    &trans    &trans    &trans &kp KP_N0     &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_COMMA  &none
            &trans          &trans        &trans        &trans        &trans                      &to FBT     &trans      &trans    &trans    &trans    &trans               &trans        &trans        &trans        &trans        &trans
            >;
        };

        mouse_layer {
            bindings = <
            &trans          &trans        &trans        &trans        &trans                                                                                              &trans        &trans        &trans        &trans        &trans
            &trans          &trans        &trans        &trans        &trans        &trans                                                                      &trans  &trans        &trans        &trans        &trans        &trans
            &trans          &none         &msc SCRL_UP  &mmv MOVE_UP  &msc SCRL_DOWN &none                                                                      &none         &mkp MB4      &mkp MB5      &none         &none         &none
            &trans          &none      &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &none                                                                      &none         &mkp MB1      &mkp MB3      &mkp MB2      &none         &kp RSHIFT
            &trans          &kp LCTRL     &none         &none         &none         &none         &trans      &trans      &trans    &trans    &trans    &trans &none         &none         &none         &none         &none         &kp LALT
            &trans          &trans        &trans        &trans        &trans                      &to DEF     &trans      &trans    &trans    &trans    &to DEF              &trans        &trans        &trans        &trans        &trans
            >;
        };

        func_bt_layer {
            bindings = <
            &kp F1          &kp F2        &kp F3        &kp F4        &kp F5                                                                                              &kp F6        &kp F7        &kp F8        &kp F9        &kp F10
            &kp F11         &kp F12       &trans        &trans        &trans        &trans                                                                      &trans  &trans        &trans        &trans        &trans        &kp F11
            &bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                                                &none         &none         &none         &none         &none         &kp F12
            &kp LSHIFT      &kp LCTRL     &none         &none         &none         &none                                                                       &none         &none         &none         &none         &none         &kp LALT
            &trans          &trans        &trans        &trans        &trans        &trans        &trans      &trans      &trans    &trans    &trans    &trans &trans        &trans        &trans        &trans        &trans        &trans
            &trans          &trans        &trans        &trans        &trans                      &to DEF     &trans      &trans    &trans    &trans    &to DEF              &trans        &trans        &trans        &trans        &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR      &none         &none         &none         &none                                                                                               &none         &none         &none         &none         &bt BT_CLR_ALL
            &none           &none         &none         &none         &none         &none                                                                       &none   &none         &none         &none         &none         &none
            &none           &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                      &none         &none         &none         &none         &none         &none
            &bootloader     &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                      &none         &none         &none         &none         &none         &bootloader
            &sys_reset      &none         &none         &none         &none         &none         &bt_2       &bt_3       &none     &none     &none     &none   &none         &none         &none         &none         &none         &sys_reset
            &none           &none         &none         &none         &none                       &bt_0       &bt_1       &out OUT_USB &none  &none     &none                 &none         &none         &none         &none         &none
            >;
        };
    };
};
